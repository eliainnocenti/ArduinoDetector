// template comments

/*------------------------------------------------------------------*/
/*Funzione setup                                                    */
/*Configura Arduino Due                                             */
/*Viene chiamata automaticamente da Arduino                         */
/*Configura la porta seriale, aspetta i parametri di configurazione */
/*da seriale, salva la configurazione, configura i due PIN di input */
/*e output, chiude la porta seriale                                 */
/*NOTA: questa funzione non va modificata                           */
/*------------------------------------------------------------------*/
void setup() {...}


/*------------------------------------------------------------------*/
/*Funzione loop                                                     */
/*Esegue il main loop di Arduino Due                                */
/*Viene chiamata automaticamente da Arduino                         */
/*Implementa la FSM per riconoscere la frequenza configurata        */
/*NOTA: questa funzione deve essere scritta da voi :)               */
/*------------------------------------------------------------------*/
void loop() {

  /*NOTA: per minimizzare il jitter del riconoscitore di frequenza, questa funzione non dovrebbe  */
  /*mai ritornare ad Arduino ma realizzare un ciclo infinito                                      */

  /*Acquisisco il tempo corrente (in us) e lo stato corrente dell'ingresso                        */
  /*A seconda dello stato della FSM effettuo una delle seguenti operazioni:                       */
  /*UNCOUPLED:  Se lo stato corrente dell'ingresso non è cambiato rispetto al precedente non      */
  /*            devo fare nulla                                                                   */
  /*            Se lo stato corrente è cambiato devo valutare se ho avuto un rising edge o un     */
  /*            falling edge. Sul falling edge devo controllare se il tempo dall'ultimo rising    */
  /*            edge (la larghezza d'impulso) è compreso fra TON_min e TON_max, se è vero allora  */
  /*            ho avuto un TON valido, altrimenti ho un TON invalido. Se ho un rising edge       */
  /*            allora controllo se il tempo dall'ultimo rising edge (il periodo) è compreso fra  */
  /*            T_min e T_max, se è vero e il TON precedente era valido allora vado nello stato   */
  /*            COUPLING, altrimenti ho avuto un TON invalido. Infine, se ho avuto un rising      */
  /*            edge, aggiorno il tempo dell'ultimo rising edge                                   */
  /*COUPLING:   Se lo stato corrente dell'ingresso non è cambiato rispetto al precedente devo     */
  /*            controllare di non aver superato il valore massimo di TON (se lo stato corrente è */
  /*            alto) oppure il valore massimo di T (se è basso). Se ho passato uno dei due       */
  /*            valori massimi ammessi allora dichiaro l'ultimo TON invalido e torno nello stato  */
  /*            UNCOUPLED                                                                         */
  /*            Se lo stato corrente è cambiato devo valutare se ho avuto un rising edge o un     */
  /*            falling edge. Sul falling edge devo controllare se il tempo dall'ultimo rising    */
  /*            edge (la larghezza d'impulso) è compreso fra TON_min e TON_max, se non è vero     */
  /*            allora ho avuto un TON invalido e torno nello stato UNCOUPLED. Se ho un rising    */
  /*            edge allora controllo se il tempo dall'ultimo rising edge (il periodo) è compreso */
  /*            fra T_min e T_max, se è vero allora vado nello stato COUPLED e accendo l'uscita,  */
  /*            altrimenti ho avuto un TON invalido e torno nello stato UNCOUPLED. Infine, se ho  */
  /*            avuto un rising edge, aggiorno il tempo dell'ultimo rising edge                   */
  /*COUPLED:    Se lo stato corrente dell'ingresso non è cambiato rispetto al precedente devo     */
  /*            controllare di non aver superato il valore massimo di TON (se lo stato corrente è */
  /*            alto) oppure il valore massimo di T (se è basso). Se ho passato uno dei due       */
  /*            valori massimi ammessi allora dichiaro l'ultimo TON invalido e torno nello stato  */
  /*            UNCOUPLED e spengo l'uscita                                                       */
  /*            Se lo stato corrente è cambiato devo valutare se ho avuto un rising edge o un     */
  /*            falling edge. Sul falling edge devo controllare se il tempo dall'ultimo rising    */
  /*            edge (la larghezza d'impulso) è compreso fra TON_min e TON_max, se non è vero     */
  /*            allora ho avuto un TON invalido, torno nello stato UNCOUPLED e spengo l'uscita.   */
  /*            Se ho un rising edge allora controllo se il tempo dall'ultimo rising edge (il     */
  /*            periodo) è  compreso fra T_min e T_max, se non è vero ho avuto un TON invalido,   */
  /*            torno nello stato UNCOUPLED e spengo l'uscita. Infine, se ho avuto un rising      */
  /*            edge, aggiorno il tempo dell'ultimo rising edge                                   */
  
  ...

}


/*------------------------------------------------------------------*/
/*Funzione printFrequencyRange                                      */
/*Stampa il range ammesso per la prequenza                          */
/*NOTA: questa funzione non va modificata                           */
/*------------------------------------------------------------------*/
static void printFrequencyRange(bool bInvalid) {...}


/*------------------------------------------------------------------*/
/*Funzione printDutyCycleRange                                      */
/*Stampa il range ammesso per il duty cycle                         */
/*NOTA: questa funzione non va modificata                           */
/*------------------------------------------------------------------*/
static void printDutyCycleRange(bool bInvalid) {...}


/*------------------------------------------------------------------*/
/*Funzione printConfig                                              */
/*Stampa la configurazione ricevuta (frequenza e duty cycle)        */
/*NOTA: questa funzione non va modificata                           */
/*------------------------------------------------------------------*/
static void printConfig(void) {...}


/*------------------------------------------------------------------*/
/*Funzione configure                                                */
/*Calcola i valori di periodo minimo e massimo (T_min e T_max) in   */
/*microsecondi (us) e i valori di larghezz d'impulso minima e       */
/*massima (TON_min e TON_max) in microsecondi (us)                  */
/*Configura i due PIN INPUT_PIN e OUTPUT_PIN come ingresso e uscita */
/*NOTA: questa funzione deve essere scritta da voi :)               */
/*------------------------------------------------------------------*/
static void configure(void) {

  /*Calcoliamo il periodo minimo e massimo*/
  /*T_min = 1 / f_max*/
  /*T_max = 1 / f_min*/
  /*NOTA: la frequenza è in mHz (quindi andrebbe divisa per 1000), il periodo lo vogliamo in microsecondi (quindi lo vorremmo moltiplicare per 10^6)*/
  /*Per minimizzare l'errore numerico possiamo fare:*/
  /*    T(us) = 10^9(ns) / f(mHz)     */


  /*Calcoliamo la larghezza d'impulso minima e massima*/
  /*TON_min = T_min * d_min / 100*/
  /*TON_max = T_max * d_max / 100*/


  /*Configuriamo il piedino INPUT_PIN come ingresso e il piedino OUTPUT_PIN come uscita*/

}